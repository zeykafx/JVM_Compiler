$ Source is a single file. No imports, etc. 

$ Comments look like this. No block comments. 

$ The language is strongly and statically typed. 

$ Base types are:  

$    int (signed 32-bit), 

$    float (32-bit),  

$    bool (true/false),  

$    string. 

$ int values are automatically promoted to float values in mixed expressions. 

$ There is no dedicated char type. Characters are represented by integers. 

$ Strings are immutable. 

  

$ Operations: 

$  For int and float, available operations are 

$      +, -, * , /, - (unary). 

$      ==, !=, <, >, <=, >= 

$  For int: 

$      % 

$  For boolean: 

$      && (and operator), || (or operator), ==, != 

$  For strings 

$      + (concatenation), ==, != 

$  The i-th characters/element in a string/array can be read by the index operator [i]. 

  

$ Built-in functions: 

$      !(bool)            : negates a boolean value, returns a boolean value 

$      chr(int)           : turns the character (an int value) into a string, returns a string 

$      len(string or array)  : gives the length of a string or array, returns an integer 

$      floor(float)    : returns the largest integer less than or equal the float value 

$ Exceptions: 

$ Run-time errors terminate the running program. 

$ Can happen when: 

$    Out of memory 

$    Division by zero 

$    Out-of-bounds array and string access 

$    float->int overflow error 

  

$ Operator precedence: 

$     function and constructor calls 

$     parenthesis 

$     index operator 

$     record field access operator . 

$     *,/,% 

$     +,-, unary - 

$     ==, !=, <, >, <=, >= 

$     &&, || 

$ Operators with same precedence are left-associative. 

 

$ Constants must be declared at the top of the source file. 

$ Constant declarations can use expressions and other constants that 

$ have been declared earlier. Only base types can be used for constants. 

  

final i int = 3; 

final j float = 3.2*5.0; 

final k int = i*3; 

final message string = "Hello"; 

final isEmpty bool = true; 

  

$ Constant declarations are followed by record definitions. 

Point rec { 

    x int; 

    y int; 

} 

Person rec{ 

    name string; 

    location Point; 

    history int[]; 

} 

  

$ Global variables are initialised in the order in which they appear. 

$ Accessing a variable that is not initialised (for example, by calling a function in the initialiser expression) 

$ a function in the initialiser expression that accesses a global variable before it has been initialised results in undefined behaviour. 

a int = 3; 

$ For arrays, only one-dimensional arrays are allowed. 

$ To initialise array or record variables, they must be assigned to an existing record or array, or a new array or record must be created. 

c int[] = array [5] of int;  $ new array of length 5 

d Person= Person("me", Point(3,7), array [i*2] of int);  $ new record 

  

$ Functions: 

$ Functions have parameters and a return type. The return type 

$ can be a type or void (in which case nothing is indicated). 

$ Base type arguments are always passed by value. 

$ Records and arrays are always passed by reference. 

$ There are built-in functions for I/O: 

$  readInt, readFloat, readString, writeInt, writeFloat, write, writeln 

$ all "read" functions take nothing as argument, as they read for the standard input, and return the type specified. All “write” functions print on the standard output (they can be seen as print functions). 

$ "writeInt" and "writeFloat" take an "int" and "float" as argument respectively, and return nothing or True/False if it succeeded or not (to be decided at the code generation phase; for now you can make an arbitrary choice). 

$ "write" and "writeln" can take anything as argument (including any primitive type). "writeln" will add an end-of-line at the end of what is written. The output is the same as the other "write" functions 

$ Hint: writeFloat should accept “-a” as an argument, where “a” is a float variable.  

$ Function calls can forward-reference functions, even in initialisers of global 

$ variables, but not in constants. 

  

$ Local variables: 

$ Functions and while/if/else/for blocks can declare local variables and values 

$ mixed with statements. 

$ Their initialisation follows the same rules as for global variables. 

  

$ Scope: 

$ Lexical scoping. 

$ Local variables can shadow variables with the same name in surrounding scopes. 

$ Keywords, types, functions, constants, and variables share one name space. 

$ All names are case sensitive. 

  

$ Control structures: 

$ for, while, if/else 

$ Control structures bodies are always block statements. 

$ "If" can be used with an "else" control block or without.
 
$ The "for" control structure takes four arguments : an initialised variable, the initial value of this variable, the maximum value of this variable, and the increment between each loop. It can be an integer, a float, or a double."

  

$ The left side of an assignment must be either: 

$    a variable 

$    an element of an array 

$         a[3] = 1234;   $ a is an array of int 

$    a field access to a record such as: 

$         a.x = 123; 

$         a[3].x = 12; 

$    To simplify the compiler, the left side cannot be an expression, this is not allowed: 

$         someFunctionThatReturnsAnArray()[2] = 2; 

$    Assigning an array or record copies the reference. 

 

$ Deallocating arrays and records: 

$ We assume that there is no garbage collector and that the created 

$ arrays and records have to be manually deallocated when not needed anymore. 

$       x Point = Point(3,5); 

$       free x; 

$ Accessing a deallocated array or record results in undefined behavior. 

$ Deallocation is not deep. Before a record is deallocated, it is the duty 

$ of the programmer to deallocate arrays or records referenced by that record. 

                                          

fun square(int v) int { 

    return v*v; 

} 

  

fun copyPoints(Point[] p) Point { 

    return Point(p[0].x+p[1].x, p[0].y+p[1].y); 

} 

                             

fun main() { 

    value int = readInt();                              

    writeln(square(value)); 

    i int; 

    for (i, 1, 100, 1) { 

        while (value!=3) { 

            if (i > 10){ 

                $ .... 

            } else { 

                $ .... 

            } 

        } 

    } 

     

    i = (i+2)*2; 

} 
