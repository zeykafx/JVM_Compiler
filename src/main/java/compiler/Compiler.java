/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package compiler;

import compiler.Lexer.Lexer;
import compiler.Lexer.Symbol;
import compiler.Parser.Parser;

import java.io.FileReader;

public class Compiler {
	public static void main(String[] args) {
		try {
			validateArgs(args);
			Module module = Module.fromFlag(args[0]);
			String filepath = args[1];

			processModule(module, filepath);
		} catch (Exception e) {
			System.err.println(e.getMessage());
			System.exit(1);
		}
	}

	private static void validateArgs(String[] args) {
		if (args.length != 2) {
			throw new IllegalArgumentException("Usage: compiler -<module> <filepath>");
		}
	}

	private static void processModule(Module module, String filepath) throws Exception {
		switch (module) {
			case LEXER:
				runLexer(filepath);
				break;
			case PARSER:
			    
                break;
			
			// OTHER MODULES HERE -----
			default:
				throw new IllegalArgumentException("Unknown module: " + module);
		}
	}

	private static void runLexer(String filepath) throws Exception {
		FileReader reader = new FileReader(filepath);
		Lexer lexer = new Lexer(reader);

		Symbol symbol;
		do {
			symbol = lexer.getNextSymbol();
			System.out.println(symbol);
		} while (symbol.type != compiler.Lexer.TokenTypes.EOF);
	}
	
	private static void runParser(String filepath) throws Exception {
        FileReader reader = new FileReader(filepath);
  		Lexer lexer = new Lexer(reader);	
        Parser parser = new Parser(lexer);
        // TODO: do something with the parser
    }
}


enum Module {
	LEXER("-lexer"),
	PARSER("-parser");

	private final String flag;

	Module(String flag) {
		this.flag = flag;
	}

	public String getFlag() {
		return flag;
	}

	public static Module fromFlag(String flag) {
		for (Module module : Module.values()) {
			if (module.getFlag().equals(flag)) {
				return module;
			}
		}

//		return null;
		throw new IllegalArgumentException("Unknown flag: " + flag);
	}
}